# -*- coding: utf-8 -*-
"""Celular Automaton for Wildfires.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/github/37stu37/FFE/blob/master/Dynamic_fire_test_urban.ipynb
"""

# Commented out IPython magic to ensure Python compatibility.
# %%time 
# !apt update
# !apt upgrade
# !apt install gdal-bin python-gdal python3-gdal 
# # Install rtree - Geopandas requirment
# !apt install python3-rtree 
# # Install Geopandas
# !pip install git+git://github.com/geopandas/geopandas.git
# # Install descartes - Geopandas requirment
# !pip install descartes 
# 
# # install rasterio
# !pip install rasterio

# Load the Drive helper and mount
from google.colab import drive
# This will prompt for authorization.
drive.mount('/content/drive')

import os
import sys
import geopandas as gpd
import matplotlib.pyplot as plt
import rasterio
from rasterio.plot import show
from osgeo import gdal_array
import numpy as np
import pandas as pd
import imageio
import random
from PIL import Image
from matplotlib.pyplot import imshow

path = '/content/drive/My Drive/04_Cloud/01_Work/GNS/008_FFE/Colab_folder'
!ls '/content/drive/My Drive/04_Cloud/01_Work/GNS/008_FFE/Colab_folder'

def load_data(path_to_data=path):
    # load building map as a "fuel" map
    fuel = gdal_array.LoadFile(os.path.join(path_to_data, 'GD_fuel_map_crop.tif'))  # 0 = no fuel; 1 = fuel
    fuel[fuel < 0] = 0
    # load probability of building ignition as an array
    ignition = gdal_array.LoadFile(os.path.join(path_to_data, 'GD_ignit_prob_crop.tif'))  # probability from 0 to 1
    ignition[ignition < 0] = 0
    # load wind data
    wind = pd.read_csv(os.path.join(path_to_data, 'GD_wind.csv'))
    return fuel, ignition, wind

fuel_map, ignition_probability_map, wind_df = load_data()

def wind_scenario(wind_data=wind_df):
    i = np.random.randint(0, wind_data.shape[0])
    wind = wind_data.iloc[i, 2]
    distance = wind_data.iloc[i, 1]
    return wind, distance

def gif(fireMap, s):
  colored = np.zeros((fireMap.shape[0], fireMap.shape[1], fireMap.shape[2], 3),dtype=np.uint8)
  for t in range(fireMap.shape[0]):
      for x in range(fireMap[t].shape[0]):
          for y in range(fireMap[t].shape[1]):
            # print(t, x, y)
            value = fireMap[t,x,y].copy()
            if value == 0:
                  colored[t,x,y] = [0, 0, 255] # Clear
            elif value == 1: 
                colored[t,x,y] = [255, 128, 0]   # Fuel
            elif value == 2: 
                colored[t,x,y] = [255,0,0]   # Burning

  imageio.mimsave(os.path.join(path, 'Fire_scenario_{}.gif'.format(s)), colored)
  print('Fire_scenario_{}.gif created'.format(s))

fig, ax = plt.subplots(ncols=2)
im0 = ax[0].imshow(fuel_map, cmap='jet', aspect='auto')
im1 = ax[1].imshow(ignition_probability_map, cmap='jet', aspect='auto')

plt.colorbar(im0, ax=ax) 
plt.show()

def fire_propagation(scenarios, fuel=fuel_map, ignition_proba=ignition_probability_map):
    fires = []
    for scenario in range(scenarios):
        wind, distance = wind_scenario()
        print(wind, distance)
        time_total = 1000
        # initialize fire by creating random ignition from ignition probability map
        random_map = np.random.random((ignition_proba.shape[0], ignition_proba.shape[1]))
        ignition_map = ignition_proba - random_map
        ignition_map[ignition_map < 0] = 0
        ignition_map[ignition_map > 0] = 1
        zeros = np.zeros((fuel_map.shape[0], fuel_map.shape[1], time_total - 1))
        ignition_map = np.expand_dims(ignition_map, axis=2)
        ignition = np.dstack((zeros, ignition_map))
        ignition = np.moveaxis(ignition, -1, 0)
        # initial fire map
        fire = np.zeros((time_total, fuel_map.shape[0], fuel_map.shape[1]))
        fire[0] = ignition[0] + fuel  # 0 = no fuel, 1 = fuel, 2 = fire

        for time in range(1, time_total, 1):
            # Make a copy of the original fire
            fire[time] = fire[time - 1].copy()
            for x in range(1, fire[0] - 1):
                for y in range(1, fire[1] - 1):
                    for d in range(distance, 1, -1):
                        if fire[time - 1, x, y] == 2 and wind == 'buffer':  # It's on fire
                            # If there's fuel surrounding it
                            # set it on fire!
                            if fire[time - 1, x - distance, y + distance] == 1:
                                fire[time, x - distance, y + distance] = 2
                            if fire[time - 1, x, y + distance] == 1:
                                fire[time, x, y + distance] = 2
                            if fire[time - 1, x + distance, y + distance] == 1:
                                fire[time, x + distance, y + distance] = 2
                            if fire[time - 1, x + distance, y] == 1:
                                fire[time, x + distance, y] = 2
                            if fire[time - 1, x + distance, y - distance] == 1:
                                fire[time, x + distance, y - distance] = 2
                            if fire[time - 1, x, y - distance] == 1:
                                fire[time, x, y - distance] = 2
                            if fire[time - 1, x - distance, y - distance] == 1:
                                fire[time, x - distance, y - distance] = 2
                            if fire[time - 1, x - distance, y] == 1:
                                fire[time, x - distance, y] = 2

                        if fire[time - 1, x, y] == 2 and wind == 'N':  # It's on fire
                            # set it on fire!
                            if fire[time - 1, x - distance, y + distance] == 1:
                                fire[time, x - distance, y + distance] = 2
                            if fire[time - 1, x, y + distance] == 1:
                                fire[time, x, y + distance] = 2
                            if fire[time - 1, x + distance, y + distance] == 1:
                                fire[time, x + distance, y + distance] = 2

                        if fire[time - 1, x, y] == 2 and wind == 'NE':  # It's on fire
                            # set it on fire!
                            if fire[time - 1, x, y + distance] == 1:
                                fire[time, x, y + distance] = 2
                            if fire[time - 1, x + distance, y + distance] == 1:
                                fire[time, x + distance, y + distance] = 2
                            if fire[time - 1, x + distance, y] == 1:
                                fire[time, x + distance, y] = 2

                        if fire[time - 1, x, y] == 2 and wind == 'E':  # It's on fire
                            # set it on fire!
                            if fire[time - 1, x + distance, y + distance] == 1:
                                fire[time, x + distance, y + distance] = 2
                            if fire[time - 1, x + distance, y] == 1:
                                fire[time, x + distance, y] = 2
                            if fire[time - 1, x + distance, y - distance] == 1:
                                fire[time, x + distance, y + distance] = 2

                        if fire[time - 1, x, y] == 2 and wind == 'SE':  # It's on fire
                            # set it on fire!
                            if fire[time - 1, x + distance, y] == 1:
                                fire[time, x + distance, y] = 2
                            if fire[time - 1, x + distance, y - distance] == 1:
                                fire[time, x + distance, y + distance] = 2
                            if fire[time - 1, x, y - distance] == 1:
                                fire[time, x, y - distance] = 2

                        if fire[time - 1, x, y] == 2 and wind == 'S':  # It's on fire
                            # set it on fire!
                            if fire[time - 1, x, y - distance] == 1:
                                fire[time, x, y - distance] = 2
                            if fire[time - 1, x - distance, y - distance] == 1:
                                fire[time, x - distance, y - distance] = 2
                            if fire[time - 1, x + distance, y - distance] == 1:
                                fire[time, x + distance, y - distance] = 2

                        if fire[time - 1, x, y] == 2 and wind == 'SW':  # It's on fire
                            # set it on fire!
                            if fire[time - 1, x, y - distance] == 1:
                                fire[time, x, y - distance] = 2
                            if fire[time - 1, x - distance, y - distance] == 1:
                                fire[time, x - distance, y - distance] = 2
                            if fire[time - 1, x - distance, y] == 1:
                                fire[time, x - distance, y] = 2

                        if fire[time - 1, x, y] == 2 and wind == 'W':  # It's on fire
                            # set it on fire!
                            if fire[time - 1, x - distance, y + distance] == 1:
                                fire[time, x - distance, y + distance] = 2
                            if fire[time - 1, x - distance, y - distance] == 1:
                                fire[time, x - distance, y - distance] = 2
                            if fire[time - 1, x - distance, y] == 1:
                                fire[time, x - distance, y] = 2

                        if fire[time - 1, x, y] == 2 and wind == 'NW':  # It's on fire
                            # set it on fire!
                            if fire[time - 1, x - distance, y + distance] == 1:
                                fire[time, x - distance, y + distance] = 2
                            if fire[time - 1, x - distance, y] == 1:
                                fire[time, x - distance, y] = 2
                            if fire[time - 1, x, y + distance] == 1:
                                fire[time, x, y + distance] = 2

                        # plot map
                        fig, ax = plt.subplots(ncols=2)
                        im0 = ax[0].imshow(fire[time], cmap='jet', aspect='auto')
                        plt.colorbar(im0, ax=ax) 
                        plt.show()

                        if np.array_equal(fire[time], fire[time - 1]) == True:
                            fires.append(fire[time])
                            pass
                        else:
                            continue

        # gif(fire, scenario)

    return fires

final_fires_list = fire_propagation(5)

final_fires_array = np.array(final_fire_list)
fire_impact = np.sum(final_fires_array)