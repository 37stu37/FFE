# -*- coding: utf-8 -*-
"""FireModel_mesa.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1h4VIAr0c-kP5Z6t_ZjaVd9JlejQb95qF
"""

import os
import sys
import matplotlib.pyplot as plt
from osgeo import gdal_array
import numpy as np
import pandas as pd
import geopandas as gpd
import shapely
from shapely.geometry import box
import random
from PIL import Image
from matplotlib.pyplot import imshow
from mesa import Model, Agent
from mesa.time import RandomActivation
from mesa.space import Grid
from mesa.datacollection import DataCollector
from mesa.batchrunner import BatchRunner
from mesa_geo import GeoSpace, GeoAgent, AgentCreator
from mesa.visualization.modules import CanvasGrid
from mesa.visualization.ModularVisualization import ModularServer

# pip install Pillow
# pip install descartes
# conda install fiona pyproj rtree shapely
# pip install mesa-geo
# pip install PyDrive

path = '/Users/alex/Google Drive/05_Sync/FFE/Mesa'
# path = "G:/Sync/FFE/Mesa"

# crop data
minx, miny = 1748570, 5426959
maxx, maxy = 1748841, 5427115
bbox = box(minx, miny, maxx, maxy)

gdf_buildings = gpd.read_file(os.path.join(path, "buildings_raw.shp"), bbox=bbox)
# gdf_buildings.plot()
gdf_buildings['IgnProb_bl'] = 0

# plot map of agents
fig, ax = plt.subplots(1, 1)
gdf_buildings.plot(column='IgnProb_bl', ax=ax, legend=True)

# wind scenario
wind = pd.read_csv(os.path.join(path, 'GD_wind.csv'))


def wind_scenario(wind_data=wind):
    i = np.random.randint(0, wind_data.shape[0])
    w = wind_data.iloc[i, 2]
    d = wind_data.iloc[i, 1]
    return w, d


class Buildings(GeoAgent):
    """
    building footprint.
    Conditions: "Fine", "On Fire", "Burned Out"
    """

    def __init__(self, unique_id, model, shape):
        super().__init__(unique_id, model, shape)
        self.condition = "Fine"
        wind_direction, critical_distance = wind_scenario()
        self.direction = wind_direction
        self.distance = critical_distance


    def step(self):
        '''
        if building is on fire, spread it to buildings according to wind conditions
        '''
        neighbors = self.model.grid.get_neighbors_within_distance(agent=self, center=False, distance=self.distance)
        if self.condition == "On Fire":
            for n in neighbors:
                if n.condition == "Fine":
                    n.condition = "On Fire"
            self.condition = "Burned Out"


        # other_agents = self.model.schedule.agents
        # if self.condition == "On Fire":
        #     for agent in other_agents:
        #         if self.distance < self.model.grid.distance(self, agent):
        #             agent.condition = "On Fire"
        #     self.condition = "Burned Out"

class WellyFire(Model):
    def __init__(self):
        self.grid = GeoSpace()
        self.schedule = RandomActivation(self)
        # agent located from shapefile
        buildings_agent_kwargs = dict(model=self)
        ac = AgentCreator(agent_class=Buildings, agent_kwargs=buildings_agent_kwargs)
        agents = ac.from_GeoDataFrame(gdf_buildings, unique_id="TARGET_FID")
        print("{} in the WellyFire".format(len(agents)))
        self.grid.add_agents(agents)
        self.dc = DataCollector({"Fine": lambda m: self.count_type(m, "Fine"),
                                 "On Fire": lambda m: self.count_type(m, "On Fire"),
                                 "Burned Out": lambda m: self.count_type(m, "Burned Out")})
        self.running = True

        # Set up agents
        print("{} set up agents in the WellyFire".format(len(agents)))
        for agent in agents:
            agent.condition = "Fine"
            if random.random() < agent.IgnProb_bl:
                agent.condition = "On Fire"
                # self.schedule.add(agent)
                print ("building on fire: {}".format(agent.unique_id))
            # else:
            #     agent.condition = "Fine"
            #     # self.schedule.add(agent)

            self.schedule.add(agent)

    def step(self):
        """
        Advance the model by one step.
        if no building on Fire, stop the model
        """
        # collect data
        self.dc.collect(self)
        # step in time
        print("STEP MODEL")
        self.schedule.step()

        # Halt if no more fire
        if self.count_type(self, "On Fire") == 0:
            self.running = False

    @staticmethod
    def count_type(model, agent_condition):
        '''
        Helper method to count agents in a given condition in a given model.
        '''
        count = 0
        for agent in model.schedule.agents:
            if agent.condition == agent_condition:
                count += 1
        return count


# Run model
# fire = WellyFire()
# fire.run_model()
#
# # plot output
# results = fire.dc.get_model_vars_dataframe()
# results.head()
# results.plot()

from mesa.visualization.modules import CanvasGrid
from mesa.visualization.ModularVisualization import ModularServer

