{"version":3,"sources":["../../../../src/lib/table/table-batch-builder.js"],"names":["DEFAULT_BATCH_SIZE","TableBatchBuilder","TableBatchType","schema","batchSize","options","batch","batchCount","bytesUsed","row","addRow","chunk","byteLength","length","chunkComplete","isFull","Boolean","Number","isFinite","normalizedBatch","getBatch","count","Object","assign"],"mappings":";;AAAA,IAAMA,kBAAkB,GAAG,GAA3B;;IAEqBC,iB;AACnB,6BAAYC,cAAZ,EAA4BC,MAA5B,EAA6E;AAAA,QAAzCC,SAAyC,uEAA7BJ,kBAA6B;AAAA,QAATK,OAAS;;AAAA;;AAC3E,SAAKH,cAAL,GAAsBA,cAAtB;AACA,SAAKC,MAAL,GAAcA,MAAd;AACA,SAAKC,SAAL,GAAiBA,SAAjB;AACA,SAAKE,KAAL,GAAa,IAAb;AACA,SAAKC,UAAL,GAAkB,CAAlB;AACA,SAAKC,SAAL,GAAiB,CAAjB;AACA,SAAKH,OAAL,GAAeA,OAAf;AACD;;;;2BAEMI,G,EAAK;AACV,UAAI,CAAC,KAAKH,KAAV,EAAiB;AAAA,YACRJ,cADQ,GACU,IADV,CACRA,cADQ;AAEf,aAAKI,KAAL,GAAa,IAAIJ,cAAJ,CAAmB,KAAKC,MAAxB,EAAgC,KAAKC,SAArC,EAAgD,KAAKC,OAArD,CAAb;AACD;;AAED,WAAKC,KAAL,CAAWI,MAAX,CAAkBD,GAAlB;AACD;;;kCAEaE,K,EAAO;AACnB,WAAKH,SAAL,IAAkBG,KAAK,CAACC,UAAN,IAAoBD,KAAK,CAACE,MAA1B,IAAoC,CAAtD;;AACA,UAAI,KAAKP,KAAT,EAAgB;AACd,aAAKA,KAAL,CAAWQ,aAAX;AACD;AACF;;;6BAEQ;AACP,aAAO,KAAKR,KAAL,IAAc,KAAKA,KAAL,CAAWS,MAAX,EAArB;AACD;;;+BAEU;AACT,aAAOC,OAAO,CAAC,KAAKV,KAAN,CAAd;AACD;;;+BAEsB;AAAA,UAAdD,OAAc,uEAAJ,EAAI;;AACrB,UAAIY,MAAM,CAACC,QAAP,CAAgBb,OAAO,CAACG,SAAxB,CAAJ,EAAwC;AACtC,aAAKA,SAAL,GAAiBH,OAAO,CAACG,SAAzB;AACD;;AAED,UAAI,KAAKF,KAAT,EAAgB;AACd,YAAMa,eAAe,GAAG,KAAKb,KAAL,CAAWc,QAAX,EAAxB;AACA,aAAKd,KAAL,GAAa,IAAb;AACAa,QAAAA,eAAe,CAACE,KAAhB,GAAwB,KAAKd,UAA7B;AACA,aAAKA,UAAL;AACAY,QAAAA,eAAe,CAACX,SAAhB,GAA4B,KAAKA,SAAjC;AACAc,QAAAA,MAAM,CAACC,MAAP,CAAcJ,eAAd,EAA+Bd,OAA/B;AACA,eAAOc,eAAP;AACD;;AAED,aAAO,IAAP;AACD;;;;;;SAnDkBlB,iB","sourcesContent":["const DEFAULT_BATCH_SIZE = 100;\n\nexport default class TableBatchBuilder {\n  constructor(TableBatchType, schema, batchSize = DEFAULT_BATCH_SIZE, options) {\n    this.TableBatchType = TableBatchType;\n    this.schema = schema;\n    this.batchSize = batchSize;\n    this.batch = null;\n    this.batchCount = 0;\n    this.bytesUsed = 0;\n    this.options = options;\n  }\n\n  addRow(row) {\n    if (!this.batch) {\n      const {TableBatchType} = this;\n      this.batch = new TableBatchType(this.schema, this.batchSize, this.options);\n    }\n\n    this.batch.addRow(row);\n  }\n\n  chunkComplete(chunk) {\n    this.bytesUsed += chunk.byteLength || chunk.length || 0;\n    if (this.batch) {\n      this.batch.chunkComplete();\n    }\n  }\n\n  isFull() {\n    return this.batch && this.batch.isFull();\n  }\n\n  hasBatch() {\n    return Boolean(this.batch);\n  }\n\n  getBatch(options = {}) {\n    if (Number.isFinite(options.bytesUsed)) {\n      this.bytesUsed = options.bytesUsed;\n    }\n\n    if (this.batch) {\n      const normalizedBatch = this.batch.getBatch();\n      this.batch = null;\n      normalizedBatch.count = this.batchCount;\n      this.batchCount++;\n      normalizedBatch.bytesUsed = this.bytesUsed;\n      Object.assign(normalizedBatch, options);\n      return normalizedBatch;\n    }\n\n    return null;\n  }\n}\n"],"file":"table-batch-builder.js"}